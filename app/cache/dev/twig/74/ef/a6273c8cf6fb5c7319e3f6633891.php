<?php

/* WebProfilerBundle:Profiler:base_js.html.twig */
class __TwigTemplate_74efa6273c8cf6fb5c7319e3f6633891 extends Twig_Template
{
    public function __construct(Twig_Environment $env)
    {
        parent::__construct($env);

        $this->parent = false;

        $this->blocks = array(
        );
    }

    protected function doDisplay(array $context, array $blocks = array())
    {
        // line 1
        echo "<script type=\"text/javascript\">/*<![CDATA[*/
    Sfjs = (function() {
        \"use strict\";

        var noop = function() {},
            request = function(url, onSuccess, onError, payload, options) {
                var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
                options = options || {};
                xhr.open(options.method || 'GET', url, true);
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.onreadystatechange = function(state) {
                    if (4 === xhr.readyState && 200 === xhr.status) {
                        (onSuccess || noop)(xhr);
                    } else if (4 === xhr.readyState && xhr.status != 200) {
                        (onError || noop)(xhr);
                    }
                };
                xhr.send(payload || '');
            },
            hasClass = function(el, klass) {
                return el.className.match(new RegExp('\\\\b' + klass + '\\\\b'));
            },
            removeClass = function(el, klass) {
                el.className = el.className.replace(new RegExp('\\\\b' + klass + '\\\\b'), ' ');
            },
            addClass = function(el, klass) {
                if (!hasClass(el, klass)) { el.className += \" \" + klass; }
            };

        return {
            hasClass: hasClass,
            removeClass: removeClass,
            addClass: addClass,
            request: request,
            load: function(selector, url, onSuccess, onError, options) {
                var el = document.getElementById(selector);

                if (el && el.getAttribute('data-sfurl') !== url) {
                    request(
                        url,
                        function(xhr) {
                            el.innerHTML = xhr.responseText;
                            el.setAttribute('data-sfurl', url);
                            removeClass(el, 'loading');
                            (onSuccess || noop)(xhr, el);
                        },
                        function(xhr) { (onError || noop)(xhr, el); },
                        options
                    );
                }

                return this;
            },
            toggle: function(selector, elOn, elOff) {
                var i,
                    style,
                    tmp = elOn.style.display,
                    el = document.getElementById(selector);

                elOn.style.display = elOff.style.display;
                elOff.style.display = tmp;

                if (el) {
                    el.style.display = 'none' === tmp ? 'none' : 'block';
                }

                return this;
            }

        }
    })();
/*]]>*/</script>
";
    }

    public function getTemplateName()
    {
        return "WebProfilerBundle:Profiler:base_js.html.twig";
    }

    public function getDebugInfo()
    {
        return array (  30 => 5,  26 => 3,  68 => 30,  50 => 15,  27 => 14,  24 => 2,  22 => 12,  19 => 1,  20 => 1,  1179 => 332,  1173 => 331,  1167 => 330,  1161 => 329,  1155 => 328,  1149 => 327,  1143 => 326,  1137 => 325,  1131 => 324,  1115 => 318,  1108 => 317,  1106 => 316,  1103 => 315,  1080 => 311,  1055 => 310,  1053 => 309,  1050 => 308,  1038 => 303,  1033 => 302,  1031 => 301,  1028 => 300,  1019 => 294,  1013 => 292,  1010 => 291,  1005 => 290,  1003 => 289,  1000 => 288,  993 => 283,  986 => 281,  983 => 277,  979 => 276,  976 => 275,  973 => 274,  971 => 273,  968 => 272,  960 => 268,  958 => 267,  955 => 266,  948 => 261,  945 => 260,  937 => 255,  933 => 254,  929 => 253,  926 => 252,  924 => 251,  921 => 250,  913 => 246,  911 => 242,  909 => 241,  906 => 240,  885 => 234,  882 => 233,  879 => 232,  876 => 231,  873 => 230,  870 => 229,  867 => 228,  864 => 227,  861 => 226,  858 => 225,  856 => 224,  853 => 223,  845 => 217,  842 => 216,  840 => 215,  837 => 214,  829 => 210,  826 => 209,  824 => 208,  821 => 207,  813 => 203,  810 => 202,  808 => 201,  805 => 200,  797 => 196,  794 => 195,  792 => 194,  789 => 193,  781 => 189,  778 => 188,  776 => 187,  773 => 186,  765 => 182,  762 => 181,  760 => 180,  757 => 179,  749 => 175,  747 => 174,  744 => 173,  736 => 169,  733 => 168,  731 => 167,  728 => 166,  720 => 162,  717 => 161,  715 => 160,  713 => 159,  710 => 158,  703 => 153,  695 => 152,  690 => 151,  687 => 150,  681 => 148,  678 => 147,  676 => 146,  673 => 145,  665 => 139,  663 => 138,  662 => 137,  660 => 135,  649 => 132,  646 => 131,  644 => 130,  632 => 123,  620 => 120,  615 => 119,  609 => 117,  604 => 115,  601 => 114,  583 => 109,  580 => 108,  564 => 104,  559 => 102,  530 => 96,  523 => 93,  516 => 91,  493 => 88,  490 => 87,  478 => 81,  469 => 78,  459 => 75,  440 => 70,  438 => 69,  429 => 64,  412 => 60,  407 => 59,  387 => 50,  379 => 47,  367 => 42,  350 => 35,  347 => 34,  345 => 33,  342 => 32,  334 => 27,  323 => 24,  316 => 22,  314 => 21,  290 => 14,  267 => 4,  260 => 332,  258 => 331,  248 => 326,  231 => 308,  226 => 300,  218 => 288,  215 => 287,  210 => 271,  195 => 250,  192 => 249,  187 => 239,  174 => 214,  159 => 193,  154 => 186,  141 => 172,  136 => 165,  131 => 157,  129 => 145,  126 => 144,  119 => 114,  116 => 113,  114 => 108,  111 => 107,  109 => 102,  94 => 57,  686 => 206,  680 => 203,  677 => 202,  669 => 198,  659 => 197,  654 => 195,  642 => 193,  627 => 185,  624 => 121,  607 => 182,  590 => 181,  581 => 178,  578 => 177,  575 => 176,  572 => 175,  562 => 103,  560 => 168,  538 => 165,  521 => 92,  512 => 162,  509 => 161,  506 => 160,  503 => 159,  498 => 157,  495 => 89,  486 => 151,  482 => 149,  480 => 148,  477 => 147,  472 => 145,  468 => 125,  462 => 76,  456 => 74,  450 => 72,  437 => 138,  435 => 68,  432 => 136,  426 => 133,  423 => 132,  416 => 61,  405 => 58,  402 => 57,  386 => 115,  380 => 112,  377 => 111,  371 => 109,  359 => 106,  356 => 37,  353 => 36,  343 => 98,  340 => 97,  337 => 96,  331 => 94,  324 => 92,  321 => 23,  318 => 90,  312 => 88,  310 => 87,  302 => 86,  298 => 84,  286 => 80,  277 => 78,  274 => 77,  250 => 327,  243 => 65,  238 => 321,  236 => 315,  228 => 307,  223 => 299,  203 => 56,  200 => 260,  197 => 259,  178 => 45,  152 => 38,  149 => 179,  146 => 178,  139 => 166,  115 => 27,  107 => 24,  101 => 86,  95 => 20,  90 => 18,  87 => 17,  84 => 41,  81 => 40,  79 => 32,  57 => 27,  52 => 104,  44 => 74,  42 => 12,  34 => 53,  301 => 137,  295 => 16,  292 => 15,  289 => 81,  281 => 129,  275 => 127,  263 => 71,  257 => 121,  254 => 329,  249 => 118,  245 => 115,  233 => 314,  221 => 102,  216 => 100,  213 => 272,  202 => 263,  186 => 88,  181 => 86,  175 => 43,  169 => 207,  160 => 77,  150 => 73,  144 => 173,  132 => 59,  123 => 30,  120 => 56,  104 => 87,  98 => 21,  92 => 19,  78 => 40,  75 => 39,  70 => 33,  62 => 156,  59 => 21,  54 => 26,  51 => 24,  38 => 18,  675 => 201,  672 => 216,  667 => 209,  661 => 136,  655 => 134,  652 => 202,  650 => 201,  647 => 200,  641 => 129,  639 => 192,  636 => 191,  630 => 194,  628 => 122,  625 => 192,  619 => 190,  617 => 189,  614 => 188,  608 => 186,  606 => 116,  603 => 184,  600 => 183,  595 => 156,  591 => 153,  585 => 110,  576 => 149,  571 => 148,  566 => 171,  563 => 146,  558 => 145,  555 => 167,  549 => 110,  545 => 109,  542 => 98,  534 => 105,  528 => 104,  520 => 102,  517 => 163,  513 => 90,  508 => 98,  505 => 97,  500 => 158,  497 => 95,  494 => 94,  488 => 93,  481 => 82,  475 => 80,  470 => 85,  467 => 77,  461 => 48,  457 => 47,  453 => 120,  448 => 71,  443 => 140,  439 => 41,  434 => 40,  431 => 39,  425 => 36,  421 => 62,  415 => 32,  411 => 31,  406 => 29,  403 => 28,  400 => 119,  393 => 52,  391 => 118,  384 => 49,  382 => 48,  378 => 182,  375 => 110,  369 => 43,  366 => 107,  364 => 41,  360 => 174,  355 => 171,  352 => 170,  338 => 169,  332 => 167,  329 => 26,  311 => 20,  305 => 163,  303 => 162,  299 => 160,  297 => 159,  293 => 157,  291 => 156,  287 => 13,  285 => 144,  282 => 79,  278 => 8,  272 => 6,  269 => 5,  266 => 137,  246 => 325,  241 => 323,  235 => 129,  227 => 105,  222 => 125,  219 => 124,  201 => 123,  198 => 122,  196 => 91,  191 => 50,  184 => 237,  179 => 222,  176 => 220,  173 => 42,  171 => 213,  166 => 206,  164 => 200,  157 => 41,  155 => 75,  143 => 71,  137 => 67,  133 => 67,  130 => 66,  106 => 101,  103 => 60,  86 => 46,  80 => 41,  74 => 20,  61 => 2,  56 => 27,  47 => 75,  45 => 19,  41 => 17,  39 => 61,  33 => 16,  31 => 12,  264 => 3,  261 => 71,  256 => 330,  252 => 328,  247 => 66,  244 => 324,  237 => 110,  232 => 63,  230 => 62,  225 => 126,  220 => 297,  217 => 58,  211 => 98,  208 => 266,  205 => 265,  199 => 52,  193 => 120,  190 => 240,  188 => 48,  185 => 47,  182 => 223,  177 => 42,  172 => 16,  167 => 76,  163 => 74,  161 => 199,  156 => 192,  153 => 43,  151 => 185,  148 => 41,  140 => 68,  134 => 158,  128 => 58,  125 => 34,  121 => 128,  112 => 26,  110 => 25,  105 => 26,  89 => 47,  83 => 58,  76 => 31,  72 => 191,  67 => 175,  64 => 3,  58 => 38,  53 => 10,  40 => 6,  37 => 54,  35 => 16,  32 => 6,  29 => 11,  23 => 1,  127 => 65,  124 => 129,  118 => 28,  113 => 40,  108 => 38,  102 => 36,  99 => 68,  96 => 67,  91 => 56,  85 => 30,  82 => 29,  77 => 27,  71 => 19,  69 => 13,  66 => 12,  63 => 50,  55 => 11,  49 => 103,  46 => 14,  43 => 21,  12 => 45,);
    }
}
